package model.Entity;

import java.util.Random;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 25 05:36:25 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EmployeeId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmployeeId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmployeeId((Number)value);
            }
        }
        ,
        EmpName {
            public Object get(EmployeesEOImpl obj) {
                return obj.getEmpName();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setEmpName((String)value);
            }
        }
        ,
        JoinDate {
            public Object get(EmployeesEOImpl obj) {
                return obj.getJoinDate();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setJoinDate((Date)value);
            }
        }
        ,
        DateBirth {
            public Object get(EmployeesEOImpl obj) {
                return obj.getDateBirth();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setDateBirth((Date)value);
            }
        }
        ,
        Gender {
            public Object get(EmployeesEOImpl obj) {
                return obj.getGender();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setGender((String)value);
            }
        }
        ,
        Aadhar {
            public Object get(EmployeesEOImpl obj) {
                return obj.getAadhar();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setAadhar((Number)value);
            }
        }
        ,
        Phone {
            public Object get(EmployeesEOImpl obj) {
                return obj.getPhone();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setPhone((Number)value);
            }
        }
        ,
        DeptId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getDeptId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setDeptId((Number)value);
            }
        }
        ,
        BranchId {
            public Object get(EmployeesEOImpl obj) {
                return obj.getBranchId();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setBranchId((Number)value);
            }
        }
        ,
        BranchesEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getBranchesEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setBranchesEO((EntityImpl)value);
            }
        }
        ,
        DepartmentsEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getDepartmentsEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setDepartmentsEO((EntityImpl)value);
            }
        }
        ,
        RecptsEO {
            public Object get(EmployeesEOImpl obj) {
                return obj.getRecptsEO();
            }

            public void put(EmployeesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EmployeesEOImpl object);

        public abstract void put(EmployeesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int EMPNAME = AttributesEnum.EmpName.index();
    public static final int JOINDATE = AttributesEnum.JoinDate.index();
    public static final int DATEBIRTH = AttributesEnum.DateBirth.index();
    public static final int GENDER = AttributesEnum.Gender.index();
    public static final int AADHAR = AttributesEnum.Aadhar.index();
    public static final int PHONE = AttributesEnum.Phone.index();
    public static final int DEPTID = AttributesEnum.DeptId.index();
    public static final int BRANCHID = AttributesEnum.BranchId.index();
    public static final int BRANCHESEO = AttributesEnum.BranchesEO.index();
    public static final int DEPARTMENTSEO = AttributesEnum.DepartmentsEO.index();
    public static final int RECPTSEO = AttributesEnum.RecptsEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesEOImpl() {
    }

    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the EmployeeId
     */
    public Number getEmployeeId() {
        return (Number)getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(Number value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for EmpName, using the alias name EmpName.
     * @return the EmpName
     */
    public String getEmpName() {
        return (String)getAttributeInternal(EMPNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpName.
     * @param value value to set the EmpName
     */
    public void setEmpName(String value) {
        setAttributeInternal(EMPNAME, value);
    }

    /**
     * Gets the attribute value for JoinDate, using the alias name JoinDate.
     * @return the JoinDate
     */
    public Date getJoinDate() {
        return (Date)getAttributeInternal(JOINDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for JoinDate.
     * @param value value to set the JoinDate
     */
    public void setJoinDate(Date value) {
        setAttributeInternal(JOINDATE, value);
    }

    /**
     * Gets the attribute value for DateBirth, using the alias name DateBirth.
     * @return the DateBirth
     */
    public Date getDateBirth() {
        return (Date)getAttributeInternal(DATEBIRTH);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateBirth.
     * @param value value to set the DateBirth
     */
    public void setDateBirth(Date value) {
        setAttributeInternal(DATEBIRTH, value);
    }

    /**
     * Gets the attribute value for Gender, using the alias name Gender.
     * @return the Gender
     */
    public String getGender() {
        return (String)getAttributeInternal(GENDER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Gender.
     * @param value value to set the Gender
     */
    public void setGender(String value) {
        setAttributeInternal(GENDER, value);
    }

    /**
     * Gets the attribute value for Aadhar, using the alias name Aadhar.
     * @return the Aadhar
     */
    public Number getAadhar() {
        return (Number)getAttributeInternal(AADHAR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Aadhar.
     * @param value value to set the Aadhar
     */
    public void setAadhar(Number value) {
        setAttributeInternal(AADHAR, value);
    }

    /**
     * Gets the attribute value for Phone, using the alias name Phone.
     * @return the Phone
     */
    public Number getPhone() {
        return (Number)getAttributeInternal(PHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Phone.
     * @param value value to set the Phone
     */
    public void setPhone(Number value) {
        setAttributeInternal(PHONE, value);
    }

    /**
     * Gets the attribute value for DeptId, using the alias name DeptId.
     * @return the DeptId
     */
    public Number getDeptId() {
        return (Number)getAttributeInternal(DEPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DeptId.
     * @param value value to set the DeptId
     */
    public void setDeptId(Number value) {
        setAttributeInternal(DEPTID, value);
    }

    /**
     * Gets the attribute value for BranchId, using the alias name BranchId.
     * @return the BranchId
     */
    public Number getBranchId() {
        return (Number)getAttributeInternal(BRANCHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BranchId.
     * @param value value to set the BranchId
     */
    public void setBranchId(Number value) {
        setAttributeInternal(BRANCHID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getBranchesEO() {
        return (EntityImpl)getAttributeInternal(BRANCHESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setBranchesEO(EntityImpl value) {
        setAttributeInternal(BRANCHESEO, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getDepartmentsEO() {
        return (EntityImpl)getAttributeInternal(DEPARTMENTSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setDepartmentsEO(EntityImpl value) {
        setAttributeInternal(DEPARTMENTSEO, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getRecptsEO() {
        return (RowIterator)getAttributeInternal(RECPTSEO);
    }

    /**
     * @param employeeId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number employeeId) {
        return new Key(new Object[]{employeeId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.Entity.EmployeesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Random random = new Random();
                int x = random.nextInt(1000);
                Number num = new Number(x);
                this.setEmployeeId(num);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation ==DML_INSERT){
                    SequenceImpl se = new SequenceImpl("EMP_SEQ",getDBTransaction());
                    this.setEmployeeId(se.getSequenceNumber());
        }
        super.doDML(operation, e);
        
    }
}
