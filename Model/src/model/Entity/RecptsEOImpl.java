package model.Entity;

import java.util.Random;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 25 05:46:32 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RecptsEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        RecptId {
            public Object get(RecptsEOImpl obj) {
                return obj.getRecptId();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setRecptId((Number)value);
            }
        }
        ,
        IssuedDate {
            public Object get(RecptsEOImpl obj) {
                return obj.getIssuedDate();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setIssuedDate((Date)value);
            }
        }
        ,
        IssuedBy {
            public Object get(RecptsEOImpl obj) {
                return obj.getIssuedBy();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setIssuedBy((Number)value);
            }
        }
        ,
        CustId {
            public Object get(RecptsEOImpl obj) {
                return obj.getCustId();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setCustId((Number)value);
            }
        }
        ,
        Amount {
            public Object get(RecptsEOImpl obj) {
                return obj.getAmount();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setAmount((Number)value);
            }
        }
        ,
        PaymtMode {
            public Object get(RecptsEOImpl obj) {
                return obj.getPaymtMode();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setPaymtMode((String)value);
            }
        }
        ,
        PrdtRcptEO {
            public Object get(RecptsEOImpl obj) {
                return obj.getPrdtRcptEO();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CustomersEO {
            public Object get(RecptsEOImpl obj) {
                return obj.getCustomersEO();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setCustomersEO((EntityImpl)value);
            }
        }
        ,
        EmployeesEO {
            public Object get(RecptsEOImpl obj) {
                return obj.getEmployeesEO();
            }

            public void put(RecptsEOImpl obj, Object value) {
                obj.setEmployeesEO((EmployeesEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(RecptsEOImpl object);

        public abstract void put(RecptsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int RECPTID = AttributesEnum.RecptId.index();
    public static final int ISSUEDDATE = AttributesEnum.IssuedDate.index();
    public static final int ISSUEDBY = AttributesEnum.IssuedBy.index();
    public static final int CUSTID = AttributesEnum.CustId.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int PAYMTMODE = AttributesEnum.PaymtMode.index();
    public static final int PRDTRCPTEO = AttributesEnum.PrdtRcptEO.index();
    public static final int CUSTOMERSEO = AttributesEnum.CustomersEO.index();
    public static final int EMPLOYEESEO = AttributesEnum.EmployeesEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RecptsEOImpl() {
    }

    /**
     * Gets the attribute value for RecptId, using the alias name RecptId.
     * @return the RecptId
     */
    public Number getRecptId() {
        return (Number)getAttributeInternal(RECPTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RecptId.
     * @param value value to set the RecptId
     */
    public void setRecptId(Number value) {
        setAttributeInternal(RECPTID, value);
    }

    /**
     * Gets the attribute value for IssuedDate, using the alias name IssuedDate.
     * @return the IssuedDate
     */
    public Date getIssuedDate() {
        return (Date)getAttributeInternal(ISSUEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssuedDate.
     * @param value value to set the IssuedDate
     */
    public void setIssuedDate(Date value) {
        setAttributeInternal(ISSUEDDATE, value);
    }

    /**
     * Gets the attribute value for IssuedBy, using the alias name IssuedBy.
     * @return the IssuedBy
     */
    public Number getIssuedBy() {
        return (Number)getAttributeInternal(ISSUEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssuedBy.
     * @param value value to set the IssuedBy
     */
    public void setIssuedBy(Number value) {
        setAttributeInternal(ISSUEDBY, value);
    }

    /**
     * Gets the attribute value for CustId, using the alias name CustId.
     * @return the CustId
     */
    public Number getCustId() {
        return (Number)getAttributeInternal(CUSTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustId.
     * @param value value to set the CustId
     */
    public void setCustId(Number value) {
        setAttributeInternal(CUSTID, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the Amount
     */
    public Number getAmount() {
        return (Number)getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(Number value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for PaymtMode, using the alias name PaymtMode.
     * @return the PaymtMode
     */
    public String getPaymtMode() {
        return (String)getAttributeInternal(PAYMTMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymtMode.
     * @param value value to set the PaymtMode
     */
    public void setPaymtMode(String value) {
        setAttributeInternal(PAYMTMODE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getPrdtRcptEO() {
        return (RowIterator)getAttributeInternal(PRDTRCPTEO);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCustomersEO() {
        return (EntityImpl)getAttributeInternal(CUSTOMERSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCustomersEO(EntityImpl value) {
        setAttributeInternal(CUSTOMERSEO, value);
    }

    /**
     * @return the associated entity EmployeesEOImpl.
     */
    public EmployeesEOImpl getEmployeesEO() {
        return (EmployeesEOImpl)getAttributeInternal(EMPLOYEESEO);
    }

    /**
     * Sets <code>value</code> as the associated entity EmployeesEOImpl.
     */
    public void setEmployeesEO(EmployeesEOImpl value) {
        setAttributeInternal(EMPLOYEESEO, value);
    }

    /**
     * @param recptId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number recptId) {
        return new Key(new Object[]{recptId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.Entity.RecptsEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Random random = new Random();
                int x = random.nextInt(1000);
                Number num = new Number(x);
                this.setRecptId(num);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation ==DML_INSERT){
                    SequenceImpl se = new SequenceImpl("RCPT_SEQ",getDBTransaction());
                    this.setRecptId(se.getSequenceNumber());
        }
        super.doDML(operation, e);
    }
}
