package model.Entity;

import java.util.Random;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 25 05:32:12 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustPrdtEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CustPrdtId {
            public Object get(CustPrdtEOImpl obj) {
                return obj.getCustPrdtId();
            }

            public void put(CustPrdtEOImpl obj, Object value) {
                obj.setCustPrdtId((Number)value);
            }
        }
        ,
        CustId {
            public Object get(CustPrdtEOImpl obj) {
                return obj.getCustId();
            }

            public void put(CustPrdtEOImpl obj, Object value) {
                obj.setCustId((Number)value);
            }
        }
        ,
        PrdtId {
            public Object get(CustPrdtEOImpl obj) {
                return obj.getPrdtId();
            }

            public void put(CustPrdtEOImpl obj, Object value) {
                obj.setPrdtId((Number)value);
            }
        }
        ,
        CustomersEO {
            public Object get(CustPrdtEOImpl obj) {
                return obj.getCustomersEO();
            }

            public void put(CustPrdtEOImpl obj, Object value) {
                obj.setCustomersEO((CustomersEOImpl)value);
            }
        }
        ,
        ProductsEO {
            public Object get(CustPrdtEOImpl obj) {
                return obj.getProductsEO();
            }

            public void put(CustPrdtEOImpl obj, Object value) {
                obj.setProductsEO((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(CustPrdtEOImpl object);

        public abstract void put(CustPrdtEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CUSTPRDTID = AttributesEnum.CustPrdtId.index();
    public static final int CUSTID = AttributesEnum.CustId.index();
    public static final int PRDTID = AttributesEnum.PrdtId.index();
    public static final int CUSTOMERSEO = AttributesEnum.CustomersEO.index();
    public static final int PRODUCTSEO = AttributesEnum.ProductsEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CustPrdtEOImpl() {
    }

    /**
     * Gets the attribute value for CustPrdtId, using the alias name CustPrdtId.
     * @return the CustPrdtId
     */
    public Number getCustPrdtId() {
        return (Number)getAttributeInternal(CUSTPRDTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustPrdtId.
     * @param value value to set the CustPrdtId
     */
    public void setCustPrdtId(Number value) {
        setAttributeInternal(CUSTPRDTID, value);
    }

    /**
     * Gets the attribute value for CustId, using the alias name CustId.
     * @return the CustId
     */
    public Number getCustId() {
        return (Number)getAttributeInternal(CUSTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustId.
     * @param value value to set the CustId
     */
    public void setCustId(Number value) {
        setAttributeInternal(CUSTID, value);
    }

    /**
     * Gets the attribute value for PrdtId, using the alias name PrdtId.
     * @return the PrdtId
     */
    public Number getPrdtId() {
        return (Number)getAttributeInternal(PRDTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrdtId.
     * @param value value to set the PrdtId
     */
    public void setPrdtId(Number value) {
        setAttributeInternal(PRDTID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity CustomersEOImpl.
     */
    public CustomersEOImpl getCustomersEO() {
        return (CustomersEOImpl)getAttributeInternal(CUSTOMERSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity CustomersEOImpl.
     */
    public void setCustomersEO(CustomersEOImpl value) {
        setAttributeInternal(CUSTOMERSEO, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getProductsEO() {
        return (EntityImpl)getAttributeInternal(PRODUCTSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setProductsEO(EntityImpl value) {
        setAttributeInternal(PRODUCTSEO, value);
    }

    /**
     * @param custPrdtId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number custPrdtId) {
        return new Key(new Object[]{custPrdtId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.Entity.CustPrdtEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Random random = new Random();
                int x = random.nextInt(1000);
                Number num = new Number(x);
                this.setCustPrdtId(num);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation ==DML_INSERT){
                    SequenceImpl se = new SequenceImpl("CUST_PRD_SEQ",getDBTransaction());
                    this.setCustPrdtId(se.getSequenceNumber());
        }
        super.doDML(operation, e);
    }
}
